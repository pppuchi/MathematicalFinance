# Numpy and Pandas for data manipulation
import pandas as pd
import numpy as np

# Import the two data visualisation libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Set some formatting parameters for this notebook
plt.style.use('fivethirtyeight')
%matplotlib inline
from IPython.display import HTML

# Increase default figure and font sizes for easier viewing.
plt.rcParams['figure.figsize'] = (8, 6)
plt.rcParams['font.size'] = 14

houses = pd.read_csv('./data/iowa_houses.csv')


--------------------------------------------------------------------------------------------------------------------------
Simple linear regression
-------------------------------------------------------------------------------------------------------------------------
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression # import
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

house_df = pd.DataFrame({'house_price':[440000, 200000, 670000, 120000, 800000, 200000, 800000, 760000, 340000, 110000],
                         'internal_area_sq_m':[100, 24, 120, 28, 150, 52, 160, 156, 117, 32],
                        'bedrooms':[2, 1, 3, 1, 4, 2, 5, 4, 2, 1]})

X = house_df[['internal_area_sq_m']] # features
y = house_df['house_price'] # labels
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression # import
linreg = LinearRegression() # initialise 
linreg.fit(X_train, y_train) # fit 

-----------------------------------------------------------
Measure errors:
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_train, linreg.predict(X_train))
rmse = np.sqrt(mse)
print('Mean squared TRAINING error: %f'% mse)
print('Root mean squared TRAINING error: %f'% rmse)

----------------------------------------------------------
Testing accuracy:
mse = mean_squared_error(y_test, linreg.predict(X_test))
rmse = np.sqrt(mse)
print('Mean squared TESTING error: %f'% mse)
print('Root mean squared TESTING error: %f'% rmse)

----------------------------------------------------------
Compare with mean-value model:
null_model = np.mean(y_train)*np.ones(len(y_test))
mse = mean_squared_error(y_test, null_model)
rmse = np.sqrt(mse)
print('Baseline model mean squared error: %f'% mse)
print('Baseline model root mean squared error: %f'% rmse)

sns.residplot(linreg.predict(X_train),y_train) 
X_new = [[150], [50]]
linreg.predict(X_new)


----------------------------------------------------------------------------------------------------------------------------
Simple linear regression on real dataset
--------------------------------------------------------------------------------------------------------------------------
import pandas as pd
houses = pd.read_csv('./data/iowa_houses.csv')

houses['GarageArea'].hist();

houses['HouseStyle'].value_counts().plot(kind='bar',figsize=(20,10));

houses.plot(kind='scatter',x='LotArea',y='SalePrice',xlim=(0,40000),alpha=0.3)


Dropna
------------
houses.isna().sum()
houses.dropna(inplace=True)

Split
------------
from sklearn.model_selection import train_test_split
X = houses[['TotRmsAbvGrd']]
y = houses['SalePrice']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

Initialise and fit a linear regression model using scikit-learn
-------------------
import numpy as np
from sklearn.linear_model import LinearRegression
house_regression = LinearRegression()
house_regression.fit(X,y)

Intercepts and coefficients
----------------------
house_regression.coef_
house_regression.intercept_

Evaluation
------------------
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_train, house_regression.predict(X_train))
rmse = np.sqrt(mse)
print('Mean squared TRAINING error: %f'% mse)
print('Root mean squared TRAINING error: %f'% rmse)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Logistic regression with multiple features
X = loans[['income']] # features
y = loans['default'] # labels
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

------------------------------------
Initialise linear regression mode
logreg_2 = LogisticRegression()
logreg_2.fit(X_train,y_train)
